<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rpc on</title><link>/tags/rpc/</link><description>Recent content in rpc on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 04 Feb 2020 00:18:55 +0800</lastBuildDate><atom:link href="/tags/rpc/index.xml" rel="self" type="application/rss+xml"/><item><title>GoNeat RPC框架设计详解</title><link>/blog/2020-02-04-goneat-rpc%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E8%AF%A6%E8%A7%A3/</link><pubDate>Tue, 04 Feb 2020 00:18:55 +0800</pubDate><guid>/blog/2020-02-04-goneat-rpc%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E8%AF%A6%E8%A7%A3/</guid><description>img { width: 680px; padding-bottom: 1rem; } GoNeat框架一直持续演进中，抽时间整理了下框架从服务启动到结束退出这一连串流程中涉及到的设计、实现细节，希望能对想了解GoNeat框架设计、实现感兴趣的同学有帮助。 本文初衷是为了介绍GoNeat框架的设计，本人觉得按照一个服务的生命周期进行介绍，读者会比较容易接受、介绍起来也没那么枯燥，缺点是一个模块的多个实现细节可能会在不同的地方提及，读者可能需要一定的前后联想。内容比较多，也可以直接跳过部分内容阅读感兴趣的章节。 由于语言功底不是特别好，在用词、句式、断句、篇章组织上难免存在不尽如人意的地方，请多多包涵。
GoNeat RPC框架设计详解 # GoNeat，追求“小而美”的设计，是基于golang开发的面向后台开发的微服务框架，旨在提升后台开发效率，让大家摆脱各种琐碎的细节，转而更加专注于服务质量本身。Simple &amp;amp; Powerful，是我们始终追求的设计理念。
本文从整体上介绍GoNeat的设计，GoNeat包括哪些核心部件，它们又是是如何协作的，服务运行期间涉及到哪些处理流程，等等。如果读者想更深入地了解，可以在本文基础上再阅读相关源码，或与我们开发者交流。
GoNeat 整体架构 # 下图展示了GoNeat的整体架构设计，包括其核心组成部分，以及不同组成部分之间的交互： GoNeat包括如下核心组成部分：
Server，代表一个服务实例，一个Server可以插入多个ServerModule； ServerModule，代表一个服务模块，实现包括StreamServer、PacketServer、HttpServer、HippoServer； NHandler，即Codec Handler，代表一个协议Handler，实现包括nrpc、ilive、sso、http等协议Handler； 不同port上可以分别提供不同协议的服务，如8000端口提供tcp/udp的nrpc服务，而8080提供http服务； 不同port上到达的请求，经协议Handler解析出请求，并根据请求中的命令字，找到注册的CmdHandler； Server将请求以函数参数的形式递交给注册的CmdHandler处理，处理完毕返回结果给调用方； 介绍完框架的核心组件之后，下面结合一个服务示例，介绍下服务启动、请求处理、服务退出的详细流程及设计细节。
GoNeat 服务示例 # 我们仍然使用“test_nrpc.proto”作为示例服务pb（您可以在 go-neat/demo/quickstart 中找到该示例）：
file: test_nrpc.proto
syntax = &amp;quot;proto2&amp;quot;; package test_nrpc; // BuyApple message BuyAppleReq { optional uint32 num = 1; }; message BuyAppleRsp { optional uint32 errcode = 1; optional string errmsg = 2; }; // SellApple message SellAppleReq { optional uint32 num = 1; }; message SellAppleRsp { optional uint32 errcode = 1; optional string errmsg = 2; }; // service test_nrpc service test_nrpc { rpc BuyApple(BuyAppleReq) returns(BuyAppleRsp); // CMD_BuyApple rpc SellApple(SellAppleReq) returns(SellAppleRsp); // CMD_SellApple } 使用goneat命令行工具来创建一个新的go-neat服务：</description></item></channel></rss>