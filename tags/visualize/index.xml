<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>visualize on</title><link>/tags/visualize/</link><description>Recent content in visualize on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 23:13:52 +0800</lastBuildDate><atom:link href="/tags/visualize/index.xml" rel="self" type="application/rss+xml"/><item><title>Visualizing Your Go Code</title><link>/blog/2020-10-06-visualizing-your-go-code/</link><pubDate>Tue, 06 Oct 2020 23:13:52 +0800</pubDate><guid>/blog/2020-10-06-visualizing-your-go-code/</guid><description>代码可读性 # 作为一名开发人员，代码可读性是我们常常挂在嘴边的。代码写出来除了让计算机能够正常执行以外，终究还是要让人能够理解它，后续才能做进一步的维护工作。如果代码写出来，只有它的作者能够看得懂，那只能说明这个作者逻辑表达能力有问题，透过其代码难以看出解决问题的思路。这是软件工程中要尽力避免的。
在软件工程方法论指导下，为了尽可能让代码可读性达标，我们往往会根据一些最佳实践拟定一些大多数人认可的标准，让所有开发人员遵守，然后通过代码评审、代码规范检查、持续集成交付流水线等综合起来，以尽可能逼近这一目标。当绝大多数人能够在约定的框架下，保质保量提交代码时，我们已经在代码可读性、可维护性方面前进了一大步。
然而，这样足够了吗？我认为还不够。
代码是思维的表达 # 代码，不过是通过一种大家都理解的语言书写出来的篇章。就好比写文章一样，要有中心思想，然后围绕中心思想要展开层层描述。写代码一样，中心思想就是我们要解决的问题，围绕中心思想的层层描述就是我们解决问题的思路。所以，代码没有什么神秘的，它是人类思维的表达。
我们是如何快速理解一篇文章的呢？
先看标题，掌握其核心关键词； 看下第一段落的内容，往往第一段会引出问题； 看下其余段落的首句、末句，往往会给出该段落的中心思想； 看下最后一段的内容，一般会给出一个结论； 通篇串下，了解文章整体含义； 为什么我们会通过这种方式？因为一篇好的文章一定有承上启下、过渡。这种循序渐进的方式，步步逼近中心思想。
那代码呢？某种程度上，代码也是类似的。
以go语言为例，通常对于一个package，我们会提供package注释来表示当前package要解决的问题； 每个package内部又包含了不同的types、variables、functions，它们结合起来来解决一个问题； 每一个function内部又分为多个步骤，每一步完成一个小功能，为下一步做好准备； 每一个小功能、步骤可能是if-else, switch-case, for-loop……之类的语言结构； 同时，我们还会提供测试用例，来验证上述方案的正确性。 有没有觉得很相似，或许我们应该采用已有的读书的经验来辅助更好地理解程序？
OOP思想认识世界 # 代码，和文章不同的是，它虽然有明显的程序构造，但是却没有明显的段落之分。
那我如何才能借鉴多年来养成的还不错的阅读习惯，来帮助我理解代码呢？当然不能盲目套用，不过俗话说，能工摹形，巧匠窃意，思想很多地方还是可以相通的。
如何更好地理解这个世界，对各种各样的问题进行抽象呢？比如一辆摩托车，它有离合器、发动机、链条、轮毂、轮胎、减震、油箱、排气等很多部件构成，我听说宝马水鸟电子控制很厉害，可以实现无人驾驶，那可是两轮的400多斤的大机器。那它的电子控制系统怎么做到的？至少要能理解一个摩托车有核心部件，整体运转起来如何理解其状态，如何控制个别部件以影响其他部件进而控制整体状态。那它如何控制部件呢？电子操作或机械操作。
扯远了，我只是有点喜欢水鸟而已。整个世界可以看做是一个个对象及其之间的联系所构成，代码也不例外。
道法自然，OOP的思想不过是借鉴了人类认识世界的方式，将其运用到了软件工程领域，以更好地对问题进行抽象，从而构建出设计更合理的软件。那代码里面有哪些语言构造体现了OOP的思想呢。
类型与对象，生物学里区分物种、种群、个体，那是因为它们既有共性，也有个性； 通信的方式，自然界个体之间的交互也有多种方式，比如雄狮撒泡尿标记领地也不管入侵者认不认同，或者低吼驱赶入侵者离开，人和人用听得懂的语言沟通； 隐私与距离，每个人都有自己的隐私，如果你的朋友跟你借100块钱你可能给了，但是他如果问是你老婆给的还是你自己的，你可能就不想借给他了，给你就行了你管那么多干嘛呢，我还不想拿自家的借你呢，说不定借你老婆的给你的呢。每个人在一副外表下总有些不愿意被人触碰、靠近的地方。 了解一个人，其实你不需要深入他的家庭本身去了解，看看他天天接触什么人，说些什么话，你也就大致清楚了。感兴趣就继续了解，不感兴趣也就拉倒了。我想绝大多数人都不是窥视狂，在拥有一定判断力的基础上，通过一些局部的信息是可以了解大致的整体信息的。
理解代码有相同之处？
流程控制 + 组件交互 # 某种程度上，我认为理解代码也有相似之处。
如果能够拎出那些比较重要的对象（objects），以及他们之间的通信（function call, chan send/recv），或者他们的私密信息（注释），是不是也能够大致有个了解呢？
如果想更深入了解下，加上事情的脉络（控制结构，if-else, switch-case, for-loop）呢？
其他信息? 我相信还有其他有用的有用信息，能够通过一些更加有效率的方式呈现出来。
认识 go/ast # 计算机编程语言，有多少种？我认为只有一种，就是人类可以理解的语言。有趣的是，编程语言之多可以覆盖元素周期表，不信来瞧瞧。
语言是什么？语言有精确的数学定义，它不是胡编乱造，尤其是编程语言； 编程语言更精确？那倒未必，人类社会多姿多彩之处，就在于会演绎出更加丰富多彩的内容，包括对语言的破坏性“创造”，人脑纠错能力太强了，我们甚至没有察觉到自己犯了错误，如网上津津乐道的山东人倒装玩法； 我能发明一门语言吗？当然，只要你能给出严谨的数学定义，没有歧义，找到一群人学会并开始用它交流，姑且可以称为语言了，比如生活大爆炸谢耳朵他老婆； 语言不是主谓宾之类的吗？主谓宾也可以进一步形式化，数学之美也让我感到惊叹； So&amp;hellip;假如我用编程语言写了一段代码，如何知道我有没有犯错误呢？那就是编译器的工作，词法分析、语法分析、语义分析，一切OK之后会进入中间代码生成、代码优化、生成最终代码。通常一般在语法分析会构建语法分析树AST（Abstract Syntax Tree），如果能够正常构建出AST，表示代码是按照语言对应生成规则来写的，就没什么大问题，反之则可能又自我“发挥”犯错了。</description></item></channel></rss>