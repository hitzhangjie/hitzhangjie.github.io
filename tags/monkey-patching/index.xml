<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>monkey-patching on 介绍</title>
    <link>https://www.hitzhangjie.pro/tags/monkey-patching/</link>
    <description>Recent content in monkey-patching on 介绍</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 23 Aug 2020 15:41:28 +0800</lastBuildDate>
    
	<atom:link href="https://www.hitzhangjie.pro/tags/monkey-patching/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Monkey Patching in Go</title>
      <link>https://www.hitzhangjie.pro/blog/2020-08-23-monkey_patching_in_go/</link>
      <pubDate>Sun, 23 Aug 2020 15:41:28 +0800</pubDate>
      
      <guid>https://www.hitzhangjie.pro/blog/2020-08-23-monkey_patching_in_go/</guid>
      <description>前几天写了篇x64汇编开发介绍的文章，当时有提到接下来会介绍下go中如何实现monkey patching，嗯，今天就来说下这个事情。 Monkey Patching 简介 monkey patching，一说到这个，很多熟悉go的同学可能会联想起gomonkey这个mock测试框架。该术语的定义取决于使用它的社区。在Ruby，Python 和许多其他动态编程语言中，“monkey patching”一词仅指在运行时对类或模块的动态修改，其目的是为了修补现有的第三方代码，以此作为解决方法。错误或功能无法正常运行。根据其不同的意图，在运行时修改类的其他形式也</description>
    </item>
    
  </channel>
</rss>