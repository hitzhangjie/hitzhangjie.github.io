<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>comment on</title><link>/tags/comment/</link><description>Recent content in comment on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Fri, 29 Jun 2018 22:39:03 +0800</lastBuildDate><atom:link href="/tags/comment/index.xml" rel="self" type="application/rss+xml"/><item><title>godoc文档</title><link>/blog/2018-06-29-godoc%E6%96%87%E6%A1%A3/</link><pubDate>Fri, 29 Jun 2018 22:39:03 +0800</pubDate><guid>/blog/2018-06-29-godoc%E6%96%87%E6%A1%A3/</guid><description>godoc文档 # 标准库文档 # 当要查看go标准库文档时，可借助godoc命令进行查询，如godoc container/list，也可以在本地开启一个web服务来查询，如godoc -http=:6060。
非标注库文档 # 当要查看非标准库（如自建项目）的文档时，我们也是借助godoc来查看，但是执行godoc命令之前需要做些准备工作。
希望在文档中看到什么信息 # package介绍 type介绍 func介绍 示例代码 针对package的示例代码 针对type的示例代码 上述几种希望看到的信息，我们首先需要在代码中按照godoc约定的方式提供上述信息，godoc才能找到这些信息展示出来。下面就分别描述下如何在代码中包含上述信息。
package &amp;amp; type &amp;amp; func 介绍 # 这里对package、type、func的介绍是以leading comments的方式在代码中直接提供的，就是package声明、type声明、func声明前面紧邻的注释，该注释与声明之间没有空行分隔。
以如下文件$GOPATH/src/kisslulu/conf/conf.go为例：
// Package conf provides support for loading json, ini, properties configuration. package conf // JsonCfg type JsonCfg struct { } // IniCfg type IniCfg struct { } // PropCfg type PropCfg struct { } // Load json config from filepath func LoadJsonCfg(filepath string) (*JsonCfg, error) { } // Load Ini config from filePath func LoadIniCfg(filepath string) (*IniCfg, error) { } // Load PropCfg from filepath func LoadPropCfg(filepath string) (*PropCfg, error) { } 运行godoc -http=:6060找到对应的package kisslulu/conf即可预览文档中对package、type、func的介绍。</description></item></channel></rss>