<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据结构与算法 on</title><link>/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link><description>Recent content in 数据结构与算法 on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 24 May 2022 11:30:15 +0800</lastBuildDate><atom:link href="/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>浅谈数据结构与算法</title><link>/blog/2022-05-24-%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link><pubDate>Tue, 24 May 2022 11:30:15 +0800</pubDate><guid>/blog/2022-05-24-%E6%B5%85%E8%B0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</guid><description>本科学数据结构与算法时，自己也比较注意理论实践想结合，对课本上讲授的内容也算是掌握的比较好，到考研复习时甚至能直接拿出草稿纸把课本中所有线性表、树、图等相关的算法直接给手写出来，至今我还保留着当时的一份草稿 :)
数据结构与算法是比较重要的，当对计算性能、存储空间提出明确要求时，就需要考虑计算复杂度、空间复杂度的问题，只不过实际工作中要求没有那么高，大家也没有那么重视而已。但是当涉及到一些复用范围比较广的代码，一般都会做benchmark来验证其是否ok。
如果一个同学脑海里有成体系的数据结构与算法的训练，在设计方案时也会同时考虑几种方案并平衡各自优缺点，这其实就是一个非常好的工程素养。当然了数据结构与算法的训练，也会逐渐培养大家一种能力，就是化繁为简、把特殊问题一般化，这种能力在编码、设计解决方案时也会具备更好的维护性。
我自认为自己具备这种能力了，但是实际情况是，在我接触了分布式领域的相关知识后，我发现数据结构与算法真的是博大精深，数据结构可以小到一个数组，也可以大到一个B+树，而对他们的运用更能彰显掌握的精炼程度，数组记录的可能是一系列普通数值，也可能是一个分布式领域冲突检测的时钟向量。
在数据结构与算法的课本上，可能接触不到这么广泛的领域，某种程度上会让人觉得课本知识有点死板、枯燥，不知道前Google工程师王争的极客时间课程《数据结构与算法》之美，是否会有另一番味道？另外，自己从未参加过ACM竞赛之类的，也看过一些参与竞赛的同学的分享、编程模板，内容覆盖面之广也让我汗颜，自觉能力不能及。
所以我准备试读下王争的课程《数据结构与算法》，go go go。</description></item></channel></rss>